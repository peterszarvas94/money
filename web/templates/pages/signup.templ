package pages;

import "pengoe/web/templates/components"
import "fmt"
import "pengoe/web/templates/layouts"

type SignupProps struct {
	Title         string
	Description   string
	RedirectUrl   string
	Firstname     string
	Lastname      string
	Username      string
	Email         string
	UsernameCheck string
	UsernameError string
	EmailCheck    string
	EmailError    string
}

templ Signup(props SignupProps) {
	@layouts.Base(layouts.BaseProps{
		Title:       props.Title,
		Description: props.Description,
	}) {
		<div
 			class="from-background to-secondary font-slab min-h-screen bg-gradient-to-br text-text"
 			hx-ext="description"
 			id="page"
		>
			<!-- background -->
			<figure
 				class="text-secondary text-giant absolute z-0 flex h-full w-full items-end justify-center pb-10"
			>
				@components.Icon()
			</figure>
			<!-- end of background -->
			<!-- content -->
			<section class="absolute z-10 w-full">
				<header class="flex justify-center py-14">
					<a href="/" class="flex items-center justify-center gap-2">
						<figure class="text-primary text-5xl">
							@components.Icon()
						</figure>
						<h1 class="font-redhat text-accent text-5xl font-bold tracking-tight">
							pengoe
						</h1>
					</a>
				</header>
				<main class="flex flex-col items-center gap-10 bg-transparent">
					<form
 						hx-post={ fmt.Sprintf("/signup?redirect=%s", props.RedirectUrl) }
 						hx-target="body"
 						hx-ext="show-client-error"
 						hx-replace-url="true"
 						class="flex w-full max-w-sm flex-col gap-4"
					>
						<div class="flex w-full gap-4">
							<div class="border-text flex w-full items-center rounded border">
								<input
 									aria-label="Firstname"
 									name="firstname"
 									placeholder="Firstname"
 									value={ props.Firstname }
 									class="w-full rounded bg-transparent px-2 py-1 focus:outline-none"
 									required
								/>
							</div>
							<div class="border-text flex w-full items-center rounded border">
								<input
 									aria-label="Lastname"
 									name="lastname"
 									placeholder="Lastname"
 									value={ props.Lastname }
 									class="w-full rounded bg-transparent px-2 py-1 focus:outline-none"
 									required
								/>
							</div>
						</div>
						<div class="border-text flex items-center rounded border">
							<input
 								aria-label="Username"
 								name="username"
 								placeholder="Username"
 								value={ props.Username }
 								class="grow rounded bg-transparent px-2 py-1 focus:outline-none"
 								required
 								hx-get="/check"
 								hx-trigger="keyup changed delay:500ms"
 								hx-target="#username-check"
 								hx-push-url="false"
							/>
							<div id="username-check">
								if props.UsernameCheck == "correct" {
									@components.Correct()
								} else if props.UsernameCheck == "incorrect" {
									@components.Incorrect()
								}
							</div>
						</div>
						<div class="border-text flex items-center rounded border">
							<input
 								aria-label="Email"
 								name="email"
 								type="email"
 								placeholder="Email"
 								value={ props.Email }
 								class="grow rounded bg-transparent px-2 py-1 focus:outline-none"
 								required
 								hx-get="/check"
 								hx-trigger="keyup changed delay:500ms"
 								hx-target="#email-check"
 								hx-push-url="false"
							/>
							<div id="email-check">
								if props.EmailCheck == "correct" {
									@components.Correct()
								} else if props.EmailCheck == "incorrect" {
									@components.Incorrect()
								}
							</div>
						</div>
						<input
 							aria-label="Password"
 							name="password"
 							type="password"
 							class="borde-text grow rounded border bg-transparent px-2 py-1 focus:outline-none"
 							placeholder="Password"
 							required
						/>
						<div class="flex justify-center">
							<button
 								aria-label="Sign up"
 								type="submit"
 								class="border-accent text-accent hover:bg-accent hover:text-secondary focus:bg-accent focus:text-secondary flex h-10 w-fit items-center rounded-lg border bg-transparent px-2 focus:outline-none"
							>
								Sign up
							</button>
						</div>
					</form>
					<div class="flex w-full max-w-sm justify-center gap-2">
						<div>Already joined?</div>
						<a
 							href={ templ.SafeURL(fmt.Sprintf("/signin?redirect=%s", props.RedirectUrl)) }
 							class="border-primary focus:border-accent hover:border-accent border-b focus:outline-none"
						>
							Sign in here.
						</a>
					</div>
					<nav class="flex flex-col gap-2">
						if props.UsernameError != "" {
							<div class="text-red-500">
								{ props.UsernameError }
							</div>
						}
						if props.EmailError != "" {
							<div class="text-red-500">
								{ props.EmailError }
							</div>
						}
					</nav>
				</main>
			</section>
			<!-- end of content -->
		</div>
	}
}
