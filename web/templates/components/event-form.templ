package components

import (
	"strconv"
	"fmt"
	"pengoe/web/templates/icons"
	"time"
)

// TODO maybe better structure for account id not this mess
type EventFormProps struct {
	New         bool
	EventId     int
	Currency    string
	Name        string
	Description string
	Income      int
	Reserved    int
	DeliveredAt time.Time
  HxTarget    string
}

templ EventForm(props EventFormProps ) {
	if props.New {
		<form
 			hx-post="/event"
 			class="m-0 flex w-full flex-col"
 			hx-trigger="submit,new-event"
 			hx-target={ props.HxTarget }
 			hx-swap="outerHTML"
			hx-include="#csrf,#account_id"
		>
			@EventFormContent(props)
		</form>
	} else {
		<form
 			hx-patch={ fmt.Sprintf("/event/%d", props.EventId) }
 			hx-trigger={ fmt.Sprintf("submit,edit-event-%d", props.EventId) }
 			hx-target={ props.HxTarget }
 			hx-swap="outerHTML"
 			class="m-0 flex w-full flex-col"
			hx-include="#csrf,#account_id"
		>
			@EventFormContent(props)
		</form>
	}
}

templ EventFormContent(props EventFormProps) {
	<div class="flex flex-col sm:flex-row sm:gap-4">
		<div class="w-full">
			/* Name */
			<div class="flex flex-col pb-6">
				<div class="flex items-center gap-2 pb-2">
					<label for="name" class="font-semibold">Event name</label>
					<div class="text-primary text-3xs">
						@icons.Star()
					</div>
				</div>
				<input
 					type="text"
 					id="name"
 					name="name"
 					value={ props.Name }
 					placeholder="Cool Festival"
 					required
 					minlength="3"
 					class="w-full min-w-0 rounded-md border border-gray-300 p-2"
				/>
			</div>
			/* DeliveredAt */
			<div class="flex flex-col pb-6">
				<div class="flex items-center gap-2 pb-2">
					<label for="name" class="font-semibold">Delivered at (DD-MM-YYYY)</label>
					<div class="text-primary text-3xs">
						@icons.Star()
					</div>
				</div>
				<input
 					type="date"
 					id="delivered_at"
 					name="delivered_at"
 					value={ props.DeliveredAt.Format("2006-01-02") }
 					required
 					class="rounded-md border border-gray-300 p-2"
				/>
			</div>
			/* Description */
			<div class="flex flex-col pb-6">
				<div class="flex items-center gap-2 pb-2">
					<label for="name" class="font-semibold">Event description</label>
				</div>
				<textarea
 					id="description"
 					name="description"
 					placeholder="2023 balance sheet"
 					class="resize-y rounded-md border border-gray-300 p-2"
				>
					{ props.Description }
				</textarea>
			</div>
		</div>
		<div class="w-full">
			/* Income */
			<div class="flex flex-col pb-6">
				<div class="flex items-center gap-2 pb-2">
					<label for="name" class="font-semibold">Income ({ props.Currency })</label>
					<div class="text-primary text-3xs">
						@icons.Star()
					</div>
				</div>
				<input
 					type="number"
 					min="0"
 					step="1"
 					id="income"
 					name="income"
 					value={ strconv.Itoa(props.Income) }
 					required
 					class="rounded-md border border-gray-300 p-2"
				/>
			</div>
			/* Reserved */
			<div class="flex flex-col pb-6">
				<div class="flex items-center gap-2 pb-2">
					<label for="name" class="font-semibold">Reserved ({ props.Currency }) </label>
				</div>
				<input
 					type="number"
 					min="0"
 					step="1"
 					id="reserved"
 					name="reserved"
 					value={ strconv.Itoa(props.Reserved) }
 					class="rounded-md border border-gray-300 p-2"
				/>
			</div>
		</div>
	</div>
	/* Submit */
	<div class="flex justify-center">
		<button
 			type="submit"
 			class="bg-primary text-text hover:bg-accent hover:text-secondary focus:bg-accent focus:text-secondary w-fit rounded-md p-2 font-semibold"
		>
			if props.New {
				Create new event
			} else {
				Update event
			}
		</button>
	</div>
}
